[{"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx":"1","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts":"2","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx":"3","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx":"4","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx":"5","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx":"6","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx":"7","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx":"8","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx":"9","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx":"10","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx":"11","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\CircularProgressBar.tsx":"12","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\AlertEnum.tsx":"13","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Snackbar\\SnackbarNotif.tsx":"14","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Modal\\SignInModal.tsx":"15","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\WelcomeText\\WelcomeText.tsx":"16","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SettingsPanel\\SettingsPanel.tsx":"17","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\http\\http.tsx":"18","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\helpers.tsx":"19","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\DisplayPanel\\DisplayPanel.tsx":"20","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MoreGenresModal\\MoreGenresModal.tsx":"21"},{"size":500,"mtime":1608436773401,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":3487,"mtime":1609300234695,"results":"25","hashOfConfig":"23"},{"size":2271,"mtime":1609210603328,"results":"26","hashOfConfig":"23"},{"size":1615,"mtime":1609293782719,"results":"27","hashOfConfig":"23"},{"size":397,"mtime":1608616554582,"results":"28","hashOfConfig":"23"},{"size":352,"mtime":1609134321180,"results":"29","hashOfConfig":"23"},{"size":805,"mtime":1609307320012,"results":"30","hashOfConfig":"23"},{"size":5372,"mtime":1609291423160,"results":"31","hashOfConfig":"23"},{"size":489,"mtime":1609025026735,"results":"32","hashOfConfig":"23"},{"size":555,"mtime":1609294346081,"results":"33","hashOfConfig":"23"},{"size":305,"mtime":1609211853050,"results":"34","hashOfConfig":"23"},{"size":451,"mtime":1609215646863,"results":"35","hashOfConfig":"23"},{"size":1888,"mtime":1609307189194,"results":"36","hashOfConfig":"23"},{"size":2033,"mtime":1609291475161,"results":"37","hashOfConfig":"23"},{"size":719,"mtime":1609274127323,"results":"38","hashOfConfig":"23"},{"size":6584,"mtime":1609313411048,"results":"39","hashOfConfig":"23"},{"size":2863,"mtime":1609311764168,"results":"40","hashOfConfig":"23"},{"size":2666,"mtime":1609311816603,"results":"41","hashOfConfig":"23"},{"size":6445,"mtime":1609291153228,"results":"42","hashOfConfig":"23"},{"size":4840,"mtime":1609313400115,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"zgppml",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx",[],["89","90"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx",["91"],"import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Grid from '@material-ui/core/Grid';\nimport { AlertMessage } from './components/helpers/AlertEnum';\nimport { SnackbarNotif } from './components/Snackbar/SnackbarNotif';\nimport SignInModal from './components/Modal/SignInModal';\nimport { WelcomeText } from './components/WelcomeText/WelcomeText';\nimport { SettingsPanel } from './components/SettingsPanel/SettingsPanel';\nimport { DisplayPanel } from './components/DisplayPanel/DisplayPanel';\nimport { getUserData } from './components/helpers/http/http';\nimport MoreGenresModal from './components/MoreGenresModal/MoreGenresModal';\nimport './App.css';\n\nfunction App() {\n  const [accessToken, setAccessToken] = useState('');\n  const [spotifyRes, setSpotifyRes] = useState({seeds: [], tracks: []});\n  const [userData, setUserData] = useState({display_name: '', images: [{url: ''}], id: ''});\n  const [message, setMessage] = useState('');\n  const [isPlaylistLoading, setIsPlaylistLoading] = useState(false);\n  const [isSignInVisible, setIsSignInVisible] = useState(false);\n\n  useEffect(() => {\n    const fetchUserData = async () => {\n      let parsed = queryString.parse(window.location.search).access_token;\n      if (typeof parsed === \"string\") {\n        setAccessToken(parsed)\n      } else {\n        return;\n      }\n      const data = await getUserData(parsed);\n      if (data.error) {\n        setMessage(AlertMessage.TokenError);\n        setIsSignInVisible(true);\n        return;\n      }\n      setUserData(data);\n    }\n    fetchUserData();\n  }, [])\n\n  function handleSnackbarClose(isClosed: boolean) {\n    if (isClosed) {\n      setMessage('');\n    }\n  }\n\n  function handleMessageChange(newMessage: string) {\n    setMessage(newMessage);\n  }\n\n  function handleSpotifyResChange(newRes: any) {\n    setSpotifyRes(newRes);\n  }\n\n  function handleIsPlaylistLoading(newIsLoading: boolean) {\n    setIsPlaylistLoading(newIsLoading);\n  }\n\n  function handleIsSignInVisible(isSignInVisible: boolean) {\n    setIsSignInVisible(isSignInVisible);\n  }\n\n  return (\n    <div className=\"App\">\n      <Grid container spacing={0}>\n        <Grid item xl={4} lg={4} md={4} sm={12} xs={12} className=\"App-header\">\n          <div className=\"settings-panel\">\n            <SettingsPanel \n              accessToken={accessToken} \n              setMessage={handleMessageChange} \n              setSpotifyRes={handleSpotifyResChange} \n              setIsPlaylistLoading={handleIsPlaylistLoading}\n              setIsSignInVisible={handleIsSignInVisible}/>\n          </div>\n        </Grid>\n        <Grid item xl={8} lg={8} md={8} sm={12} xs={12} className=\"display-panel\">\n          {accessToken === '' &&\n            <div className=\"welcome-text\">\n              <WelcomeText />\n            </div>\n          }\n          {userData.id !== '' &&\n            <DisplayPanel \n              accessToken={accessToken}\n              userData={userData}\n              spotifyRes={spotifyRes}\n              isPlaylistLoading={isPlaylistLoading}\n              setMessage={handleMessageChange}\n              setIsSignInVisible={handleIsSignInVisible}/>\n          }\n        </Grid>\n      </Grid>\n      {message !== '' &&\n            <SnackbarNotif isOpen={true} message={message} onClose={handleSnackbarClose}/>\n      }\n      {isSignInVisible &&\n        <SignInModal isSignInVisible={isSignInVisible} setIsSignInVisible={handleIsSignInVisible}/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx",["92"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport VisibilitySensor from \"react-visibility-sensor\";\r\nimport { ProgressBar } from '../shared/ProgressBar';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    inline: {\r\n      display: 'inline',\r\n      color: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700]\r\n    },\r\n    albumImage: {\r\n        objectFit: 'contain',\r\n        width: '5em',\r\n        marginRight: '1em',\r\n    },\r\n    playPause: {\r\n        color: '#1DB954',\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        marginRight: '1.5em'\r\n    },\r\n    disabled: {\r\n        color: '#bdbdbd',\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        marginRight: '1.5em'\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function SpotifyListItem(props: {key: any, track: any, index: number, onChange: (newVisible: boolean) => void}) {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const isDisabled = props.track.preview_url === null\r\n    const [currTime, setCurrTime] = useState(0);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isAnimate, setIsAnimate] = useState(false);\r\n    const audioEl: any = useRef(null);\r\n    const classes = useStyles();\r\n    const duration = 61;\r\n\r\n    useEffect(() => {\r\n        let interval: any = null;\r\n        if (isPlaying && currTime !== duration) {\r\n            interval = setInterval(() => {\r\n                setCurrTime(currTime => currTime + 1);\r\n              }, 500);\r\n        } \r\n        else if (isPlaying && currTime === duration) {\r\n            setIsPlaying(false);\r\n            setCurrTime(0);\r\n            clearInterval(interval);\r\n            setIsActive(false);\r\n        }\r\n        else if (!isPlaying && currTime !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, [isPlaying, currTime])\r\n\r\n    useEffect(() => {\r\n        if (isPlaying && audioEl.current !== null) {\r\n            audioEl.current.play();\r\n        } else if(!isPlaying && audioEl.current !== null){\r\n            audioEl.current.pause();\r\n        }\r\n    }, [isPlaying])\r\n\r\n    useEffect(() => { /*FIX THIS LATER*/\r\n        return function cleanup() {\r\n            setIsPlaying(false);\r\n            setCurrTime(0);\r\n            setIsActive(false);\r\n        }\r\n    }, [props.track])\r\n\r\n    useEffect(() => { /*FIX THIS TOO */\r\n        props.onChange(isAnimate);\r\n    }, [isAnimate])\r\n\r\n    const getArtists = () => {\r\n        let artist_list: any[] = [];\r\n        props.track.artists.map((artist: any) => {\r\n            return artist_list.push(artist.name);\r\n        })\r\n        return artist_list.join(', ');\r\n    }\r\n\r\n    const onPlayPauseClick = () => {\r\n        if (isPlaying) {\r\n            setIsPlaying(false)\r\n        } else {\r\n            setIsPlaying(true)\r\n            setIsActive(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <VisibilitySensor\r\n            onChange={(isVisible) => {\r\n                if (props.index === 1) {\r\n                    setIsAnimate(isVisible);\r\n                }\r\n            }}\r\n        >\r\n            <ListItem button={true} alignItems=\"flex-start\">\r\n                <img alt={props.track.album.name} src={props.track.album.images[0].url} className={classes.albumImage}/>\r\n                <ListItemText\r\n                    primary={props.track.name}\r\n                    secondary={\r\n                        <React.Fragment>\r\n                        <Typography\r\n                            component=\"span\"\r\n                            variant=\"body2\"\r\n                            className={classes.inline}\r\n                        >\r\n                            {props.track.album.name}\r\n                            <br/>\r\n                            {getArtists()}\r\n                            \r\n                        </Typography>\r\n                        {isActive &&\r\n                            <ProgressBar variant=\"determinate\" value={currTime * (100/duration)}/>\r\n                        }\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"play-pause-button\" onClick={onPlayPauseClick} disabled={isDisabled}>\r\n                        {!isPlaying && \r\n                            <PlayCircleOutlineIcon className={isDisabled ? classes.disabled : classes.playPause}/>\r\n                        }\r\n                        {isPlaying &&\r\n                            <PauseCircleOutlineIcon className={classes.playPause} />\r\n                        }\r\n                    </IconButton>\r\n                    <audio ref={audioEl} src={props.track.preview_url} />\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </VisibilitySensor>\r\n    )\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\CircularProgressBar.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\AlertEnum.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Snackbar\\SnackbarNotif.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Modal\\SignInModal.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\WelcomeText\\WelcomeText.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SettingsPanel\\SettingsPanel.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\http\\http.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\helpers.tsx",["93","94"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\DisplayPanel\\DisplayPanel.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MoreGenresModal\\MoreGenresModal.tsx",["95"],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":11,"column":8,"nodeType":"102","messageId":"103","endLine":11,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":88,"column":8,"nodeType":"106","endLine":88,"endColumn":19,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":4,"column":32,"nodeType":"110","messageId":"111","endLine":4,"endColumn":34},{"ruleId":"108","severity":1,"message":"109","line":9,"column":36,"nodeType":"110","messageId":"111","endLine":9,"endColumn":38},{"ruleId":"100","severity":1,"message":"112","line":15,"column":10,"nodeType":"102","messageId":"103","endLine":15,"endColumn":14},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"@typescript-eslint/no-unused-vars","'MoreGenresModal' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["115"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'open' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},"Update the dependencies array to be: [isAnimate, props]",{"range":"118","text":"119"},[2986,2997],"[isAnimate, props]"]