[{"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx":"1","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts":"2","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx":"3","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx":"4","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx":"5","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx":"6","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx":"7","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx":"8","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx":"9","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx":"10","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx":"11"},{"size":500,"mtime":1608436773401,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":7516,"mtime":1609126356089,"results":"15","hashOfConfig":"13"},{"size":2265,"mtime":1608616795667,"results":"16","hashOfConfig":"13"},{"size":2029,"mtime":1609019548542,"results":"17","hashOfConfig":"13"},{"size":397,"mtime":1608616554582,"results":"18","hashOfConfig":"13"},{"size":300,"mtime":1608619488097,"results":"19","hashOfConfig":"13"},{"size":785,"mtime":1609019103330,"results":"20","hashOfConfig":"13"},{"size":4701,"mtime":1609033305497,"results":"21","hashOfConfig":"13"},{"size":489,"mtime":1609025026735,"results":"22","hashOfConfig":"13"},{"size":238,"mtime":1609126026138,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"zgppml",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx",[],["51","52"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx",["53","54","55","56"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx",["57"],"import React, { useState, useEffect } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { GreenCheckbox } from '../shared/GreenCheckbox';\r\nimport './MetricSlider.css';\r\n\r\nconst GreenSlider = withStyles({\r\n    root: {\r\n      color: '#52af77',\r\n    },\r\n    thumb: {\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n    },\r\n    active: {},\r\n  })(Slider);\r\n\r\nfunction valuetext(value: number) {\r\n    return `${value}`;\r\n}\r\n\r\nexport default function MetricSlider(props: {name: string, onChange: (newValue: number, isEnabled: boolean) => void, initEnabled: boolean}) {\r\n    const defaultVal = 20;\r\n    const [currValue, setCurrValue] = useState(defaultVal);\r\n    const [isEnabled, setIsEnabled] = useState(props.initEnabled);\r\n\r\n    useEffect(() => {\r\n        props.onChange(currValue, isEnabled)\r\n    }, [currValue, isEnabled])\r\n\r\n    function handleChange(event: object, value: number | number[]) {\r\n        if (typeof value === \"number\") {\r\n            setCurrValue(value)\r\n        }   \r\n    }\r\n\r\n    const handleEnabledChange = (event: { target: { checked: boolean; name: string; }; }) => {\r\n        setIsEnabled(event.target.checked);\r\n    }\r\n\r\n    return (\r\n        <div className=\"slider-wrapper\">\r\n            <div className=\"slider-group\">\r\n                <div className=\"slider-title\">\r\n                    <Typography id=\"discrete-slider-always\">\r\n                        {props.name}\r\n                    </Typography>\r\n                </div>\r\n                <div className=\"slider-checkbox\">\r\n                        <GreenCheckbox checked={isEnabled} onChange={handleEnabledChange}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"slider-control\">\r\n                <GreenSlider\r\n                    defaultValue={defaultVal}\r\n                    getAriaValueText={valuetext}\r\n                    aria-labelledby=\"discrete-slider-always\"\r\n                    step={5}\r\n                    valueLabelDisplay=\"on\"\r\n                    onChange={handleChange}\r\n                    disabled={!isEnabled}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx",["58","59","60","61"],"import React, { useState, useEffect } from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport * as genres from '../helpers/genres.json';\r\nimport * as genresInitialState from '../helpers/genreSelectInitialState.json';\r\nimport { GreenCheckbox }  from '../shared/GreenCheckbox';\r\n\r\nexport default function GenreSelector(props: {onChange: (newValue: any[]) => void}) {\r\n    //const [state, setState] = useState(genresInitialState.popular_genres)\r\n    const [state, setState] = useState([\r\n        {id: \"pop\", checked: false}, \r\n        {id: \"hip-hop\", checked: false}, \r\n        {id: \"rock\", checked: false}, \r\n        {id: \"edm\", checked: false}, \r\n        {id: \"indie\", checked: false}, \r\n        {id: \"k-pop\", checked: false}, \r\n        {id: \"country\", checked: false}, \r\n        {id: \"classical\", checked: false}, \r\n    ]);\r\n\r\n    useEffect(() => {\r\n        props.onChange(state)\r\n    }, [state]);\r\n\r\n    const handleChange = (event: { target: { checked: boolean; name: string; }; }) => {\r\n        let updated_box = {id: event.target.name, checked: event.target.checked};\r\n        let updated_state: { id: string; checked: boolean; }[] = [];\r\n        state.map((genre) => {\r\n            if (genre.id === event.target.name) {\r\n                updated_state.push(updated_box);\r\n            } else {\r\n                updated_state.push(genre);\r\n            }\r\n        })\r\n        setState(state => updated_state)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <FormGroup row>\r\n                {state.map((genre, i) => {\r\n                    return (\r\n                        <FormControlLabel\r\n                            control={<GreenCheckbox checked={genre.checked} onChange={handleChange} name={genre.id}/>}\r\n                            label={genre.id}\r\n                            key={i}\r\n                        />\r\n                    )\r\n                })}\r\n            </FormGroup>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx",["62"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport SpotifyListItem from '../SpotifyListItem/SpotifyListItem';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      backgroundColor: '#161b22',\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function SpotifyList(props: {tracks: object[]}) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <List className={classes.root}>\r\n            {props.tracks.map((track, i) => {\r\n                return (\r\n                    <SpotifyListItem key={i} track={track} />\r\n                )\r\n            })}\r\n        </List>\r\n    )\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx",["63","64"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport { ProgressBar } from '../shared/ProgressBar';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    inline: {\r\n      display: 'inline',\r\n      color: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700]\r\n    },\r\n    albumImage: {\r\n        objectFit: 'contain',\r\n        width: '5em',\r\n        marginRight: '1em',\r\n    },\r\n    playPause: {\r\n        color: '#1DB954',\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        marginRight: '1.5em'\r\n    },\r\n    disabled: {\r\n        color: '#bdbdbd',\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        marginRight: '1.5em'\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function SpotifyListItem(props: {key: any, track: any}) {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const isDisabled = props.track.preview_url === null\r\n    const [currTime, setCurrTime] = useState(0);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const audioEl: any = useRef(null);\r\n    const classes = useStyles();\r\n    const duration = 61;\r\n\r\n    useEffect(() => {\r\n        let interval: any = null;\r\n        if (isPlaying && currTime !== duration) {\r\n            interval = setInterval(() => {\r\n                setCurrTime(currTime => currTime + 1);\r\n              }, 500);\r\n        } \r\n        else if (isPlaying && currTime === duration) {\r\n            setIsPlaying(false);\r\n            setCurrTime(0);\r\n            clearInterval(interval);\r\n            setIsActive(false);\r\n        }\r\n        else if (!isPlaying && currTime !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, [isPlaying, currTime])\r\n\r\n    useEffect(() => {\r\n        if (isPlaying && audioEl.current !== null) {\r\n            audioEl.current.play();\r\n        } else if(!isPlaying && audioEl.current !== null){\r\n            audioEl.current.pause();\r\n        }\r\n    }, [isPlaying])\r\n\r\n    useEffect(() => { /*FIX THIS LATER*/\r\n        return function cleanup() {\r\n            setIsPlaying(false);\r\n            setCurrTime(0);\r\n            setIsActive(false);\r\n        }\r\n    }, [props.track])\r\n\r\n    const getArtists = () => {\r\n        let artist_list: any[] = [];\r\n        props.track.artists.map((artist: any) => {\r\n            artist_list.push(artist.name);\r\n        })\r\n        return artist_list.join(', ');\r\n    }\r\n\r\n    const onPlayPauseClick = () => {\r\n        if (isPlaying) {\r\n            setIsPlaying(false)\r\n        } else {\r\n            setIsPlaying(true)\r\n            setIsActive(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ListItem button={true} alignItems=\"flex-start\">\r\n            <img src={props.track.album.images[0].url} className={classes.albumImage}/>\r\n            <ListItemText\r\n                primary={props.track.name}\r\n                secondary={\r\n                    <React.Fragment>\r\n                    <Typography\r\n                        component=\"span\"\r\n                        variant=\"body2\"\r\n                        className={classes.inline}\r\n                    >\r\n                        {props.track.album.name}\r\n                        <br/>\r\n                        {getArtists()}\r\n                        \r\n                    </Typography>\r\n                    {isActive &&\r\n                        <ProgressBar variant=\"determinate\" value={currTime * (100/duration)}/>\r\n                    }\r\n                    </React.Fragment>\r\n                }\r\n            />\r\n            <ListItemSecondaryAction>\r\n                <IconButton edge=\"end\" aria-label=\"play-pause-button\" onClick={onPlayPauseClick} disabled={isDisabled}>\r\n                    {!isPlaying && \r\n                        <PlayCircleOutlineIcon className={isDisabled ? classes.disabled : classes.playPause}/>\r\n                    }\r\n                    {isPlaying &&\r\n                        <PauseCircleOutlineIcon className={classes.playPause} />\r\n                    }\r\n                </IconButton>\r\n                <audio ref={audioEl} src={props.track.preview_url} />\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    )\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":25},{"ruleId":"69","severity":1,"message":"73","line":28,"column":10,"nodeType":"71","messageId":"72","endLine":28,"endColumn":19},{"ruleId":"74","severity":1,"message":"75","line":102,"column":32,"nodeType":"76","messageId":"77","endLine":102,"endColumn":34},{"ruleId":"78","severity":1,"message":"79","line":193,"column":13,"nodeType":"80","endLine":193,"endColumn":72},{"ruleId":"81","severity":1,"message":"82","line":31,"column":8,"nodeType":"83","endLine":31,"endColumn":30,"suggestions":"84"},{"ruleId":"69","severity":1,"message":"85","line":4,"column":13,"nodeType":"71","messageId":"72","endLine":4,"endColumn":19},{"ruleId":"69","severity":1,"message":"86","line":5,"column":13,"nodeType":"71","messageId":"72","endLine":5,"endColumn":31},{"ruleId":"81","severity":1,"message":"82","line":23,"column":8,"nodeType":"83","endLine":23,"endColumn":15,"suggestions":"87"},{"ruleId":"74","severity":1,"message":"75","line":28,"column":27,"nodeType":"76","messageId":"77","endLine":28,"endColumn":29},{"ruleId":"69","severity":1,"message":"88","line":2,"column":8,"nodeType":"71","messageId":"72","endLine":2,"endColumn":18},{"ruleId":"74","severity":1,"message":"75","line":86,"column":47,"nodeType":"76","messageId":"77","endLine":86,"endColumn":49},{"ruleId":"78","severity":1,"message":"79","line":103,"column":13,"nodeType":"80","endLine":103,"endColumn":88},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'scrolling' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["91"],"'genres' is defined but never used.","'genresInitialState' is defined but never used.",["92"],"'Typography' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [currValue, isEnabled, props]",{"range":"97","text":"98"},"Update the dependencies array to be: [props, state]",{"range":"99","text":"100"},[963,985],"[currValue, isEnabled, props]",[976,983],"[props, state]"]