[{"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx":"1","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts":"2","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx":"3","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx":"4","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx":"5","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx":"6","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx":"7","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx":"8","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx":"9","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx":"10","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx":"11","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\CircularProgressBar.tsx":"12","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\AlertEnum.tsx":"13","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Snackbar\\SnackbarNotif.tsx":"14","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Modal\\SignInModal.tsx":"15","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\WelcomeText\\WelcomeText.tsx":"16","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SettingsPanel\\SettingsPanel.tsx":"17","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\http\\http.tsx":"18","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\helpers.tsx":"19","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\DisplayPanel\\DisplayPanel.tsx":"20"},{"size":500,"mtime":1608436773401,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":3397,"mtime":1609290425306,"results":"24","hashOfConfig":"22"},{"size":2271,"mtime":1609210603328,"results":"25","hashOfConfig":"22"},{"size":2049,"mtime":1609210582765,"results":"26","hashOfConfig":"22"},{"size":397,"mtime":1608616554582,"results":"27","hashOfConfig":"22"},{"size":352,"mtime":1609134321180,"results":"28","hashOfConfig":"22"},{"size":805,"mtime":1609203553404,"results":"29","hashOfConfig":"22"},{"size":5372,"mtime":1609291423160,"results":"30","hashOfConfig":"22"},{"size":489,"mtime":1609025026735,"results":"31","hashOfConfig":"22"},{"size":555,"mtime":1609207206691,"results":"32","hashOfConfig":"22"},{"size":305,"mtime":1609211853050,"results":"33","hashOfConfig":"22"},{"size":451,"mtime":1609215646863,"results":"34","hashOfConfig":"22"},{"size":1888,"mtime":1609291388745,"results":"35","hashOfConfig":"22"},{"size":2033,"mtime":1609291475161,"results":"36","hashOfConfig":"22"},{"size":719,"mtime":1609274127323,"results":"37","hashOfConfig":"22"},{"size":5754,"mtime":1609290160923,"results":"38","hashOfConfig":"22"},{"size":2742,"mtime":1609291276197,"results":"39","hashOfConfig":"22"},{"size":2415,"mtime":1609278813531,"results":"40","hashOfConfig":"22"},{"size":6445,"mtime":1609291153228,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"zgppml",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx",[],["85","86"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx",["87","88"],"import React, { useState, useEffect } from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport * as genres from '../helpers/genres.json';\r\nimport * as genresInitialState from '../helpers/genreSelectInitialState.json';\r\nimport { GreenCheckbox }  from '../shared/GreenCheckbox';\r\n\r\nexport default function GenreSelector(props: {onChange: (newValue: any[]) => void}) {\r\n    //const [state, setState] = useState(genresInitialState.popular_genres)\r\n    const [state, setState] = useState([\r\n        {id: \"pop\", checked: true}, \r\n        {id: \"hip-hop\", checked: false}, \r\n        {id: \"rock\", checked: false}, \r\n        {id: \"edm\", checked: false}, \r\n        {id: \"indie\", checked: false}, \r\n        {id: \"k-pop\", checked: false}, \r\n        {id: \"country\", checked: false}, \r\n        {id: \"classical\", checked: false}, \r\n    ]);\r\n\r\n    useEffect(() => {\r\n        props.onChange(state)\r\n    }, [state, props]);\r\n\r\n    const handleChange = (event: { target: { checked: boolean; name: string; }; }) => {\r\n        let updated_box = {id: event.target.name, checked: event.target.checked};\r\n        let updated_state: { id: string; checked: boolean; }[] = [];\r\n        state.map((genre) => {\r\n            if (genre.id === event.target.name) {\r\n                return updated_state.push(updated_box);\r\n            } else {\r\n                return updated_state.push(genre);\r\n            }\r\n        })\r\n        setState(state => updated_state)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <FormGroup row>\r\n                {state.map((genre, i) => {\r\n                    return (\r\n                        <FormControlLabel\r\n                            control={<GreenCheckbox checked={genre.checked} onChange={handleChange} name={genre.id}/>}\r\n                            label={genre.id}\r\n                            key={i}\r\n                        />\r\n                    )\r\n                })}\r\n            </FormGroup>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx",["89"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\CircularProgressBar.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\AlertEnum.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Snackbar\\SnackbarNotif.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Modal\\SignInModal.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\WelcomeText\\WelcomeText.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SettingsPanel\\SettingsPanel.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\http\\http.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\helpers.tsx",["90"],"\r\nfunction generateSeedGenres(selectedGenres: any[]): string {\r\n    let selected_arr: string[] = [];\r\n    selectedGenres.map((genre) => {\r\n      if (genre.checked) {\r\n        return selected_arr.push(genre.id);\r\n      }\r\n    });\r\n    return \"seed_genres=\" + selected_arr.join('%2C');\r\n}\r\n\r\nfunction buildTuneableString(isPopularity: boolean, \r\n                            popularity: number,\r\n                            isEnergy: boolean,\r\n                            energy: number,\r\n                            isInstrumentalness: boolean,\r\n                            instrumentalness: number,\r\n                            isAcousticness: boolean,\r\n                            acousticness: number,\r\n                            isHappiness: boolean,\r\n                            happiness: number\r\n                            ): string {\r\n    let tuneableString: string = '';\r\n    if (isPopularity) {\r\n        tuneableString += \"&target_popularity=\" + popularity;\r\n    }\r\n    if (isEnergy) {\r\n        tuneableString += \"&target_energy=\" + String(energy/100);\r\n    }\r\n    if (isInstrumentalness) {\r\n        tuneableString += \"&target_instrumentalness=\" + String(instrumentalness/100);\r\n    }\r\n    if (isAcousticness) {\r\n        tuneableString += \"&target_acousticness=\" + String(acousticness/100);\r\n    }\r\n    if (isHappiness) {\r\n        tuneableString += \"&target_valence=\" + String(happiness/100); \r\n    }\r\n    return tuneableString;\r\n}\r\n\r\nexport default function queryBuilder(selectedGenres: any[],\r\n                                    isPopularity: boolean, \r\n                                    popularity: number,\r\n                                    isEnergy: boolean,\r\n                                    energy: number,\r\n                                    isInstrumentalness: boolean,\r\n                                    instrumentalness: number,\r\n                                    isAcousticness: boolean,\r\n                                    acousticness: number,\r\n                                    isHappiness: boolean,\r\n                                    happiness: number\r\n                                    ): string {\r\n    return 'https://api.spotify.com/v1/recommendations?' + generateSeedGenres(selectedGenres) + buildTuneableString(isPopularity, popularity, isEnergy, energy, isInstrumentalness, instrumentalness, isAcousticness, acousticness, isHappiness, happiness) + \"&limit=30\";\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\DisplayPanel\\DisplayPanel.tsx",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":4,"column":13,"nodeType":"97","messageId":"98","endLine":4,"endColumn":19},{"ruleId":"95","severity":1,"message":"99","line":5,"column":13,"nodeType":"97","messageId":"98","endLine":5,"endColumn":31},{"ruleId":"100","severity":1,"message":"101","line":88,"column":8,"nodeType":"102","endLine":88,"endColumn":19,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":4,"column":32,"nodeType":"106","messageId":"107","endLine":4,"endColumn":34},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"@typescript-eslint/no-unused-vars","'genres' is defined but never used.","Identifier","unusedVar","'genresInitialState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["110"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},"Update the dependencies array to be: [isAnimate, props]",{"range":"113","text":"114"},[2986,2997],"[isAnimate, props]"]