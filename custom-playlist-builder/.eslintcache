[{"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx":"1","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts":"2","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx":"3","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx":"4","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx":"5","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx":"6","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx":"7","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx":"8","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx":"9","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx":"10","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx":"11","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\CircularProgressBar.tsx":"12"},{"size":500,"mtime":1608436773401,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":11250,"mtime":1609212474371,"results":"16","hashOfConfig":"14"},{"size":2271,"mtime":1609210603328,"results":"17","hashOfConfig":"14"},{"size":2049,"mtime":1609210582765,"results":"18","hashOfConfig":"14"},{"size":397,"mtime":1608616554582,"results":"19","hashOfConfig":"14"},{"size":352,"mtime":1609134321180,"results":"20","hashOfConfig":"14"},{"size":805,"mtime":1609203553404,"results":"21","hashOfConfig":"14"},{"size":5372,"mtime":1609203876988,"results":"22","hashOfConfig":"14"},{"size":489,"mtime":1609025026735,"results":"23","hashOfConfig":"14"},{"size":555,"mtime":1609207206691,"results":"24","hashOfConfig":"14"},{"size":305,"mtime":1609211853050,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"zgppml",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx",[],["52","53"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx",["54","55"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx",["56","57"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx",["58"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport VisibilitySensor from \"react-visibility-sensor\";\r\nimport { ProgressBar } from '../shared/ProgressBar';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    inline: {\r\n      display: 'inline',\r\n      color: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700]\r\n    },\r\n    albumImage: {\r\n        objectFit: 'contain',\r\n        width: '5em',\r\n        marginRight: '1em',\r\n    },\r\n    playPause: {\r\n        color: '#1DB954',\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        marginRight: '1.5em'\r\n    },\r\n    disabled: {\r\n        color: '#bdbdbd',\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        marginRight: '1.5em'\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function SpotifyListItem(props: {key: any, track: any, index: number, onChange: (newVisible: boolean) => void}) {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const isDisabled = props.track.preview_url === null\r\n    const [currTime, setCurrTime] = useState(0);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isAnimate, setIsAnimate] = useState(false);\r\n    const audioEl: any = useRef(null);\r\n    const classes = useStyles();\r\n    const duration = 61;\r\n\r\n    useEffect(() => {\r\n        let interval: any = null;\r\n        if (isPlaying && currTime !== duration) {\r\n            interval = setInterval(() => {\r\n                setCurrTime(currTime => currTime + 1);\r\n              }, 500);\r\n        } \r\n        else if (isPlaying && currTime === duration) {\r\n            setIsPlaying(false);\r\n            setCurrTime(0);\r\n            clearInterval(interval);\r\n            setIsActive(false);\r\n        }\r\n        else if (!isPlaying && currTime !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, [isPlaying, currTime])\r\n\r\n    useEffect(() => {\r\n        if (isPlaying && audioEl.current !== null) {\r\n            audioEl.current.play();\r\n        } else if(!isPlaying && audioEl.current !== null){\r\n            audioEl.current.pause();\r\n        }\r\n    }, [isPlaying])\r\n\r\n    useEffect(() => { /*FIX THIS LATER*/\r\n        return function cleanup() {\r\n            setIsPlaying(false);\r\n            setCurrTime(0);\r\n            setIsActive(false);\r\n        }\r\n    }, [props.track])\r\n\r\n    useEffect(() => { /*FIX THIS TOO */\r\n        props.onChange(isAnimate);\r\n    }, [isAnimate])\r\n\r\n    const getArtists = () => {\r\n        let artist_list: any[] = [];\r\n        props.track.artists.map((artist: any) => {\r\n            return artist_list.push(artist.name);\r\n        })\r\n        return artist_list.join(', ');\r\n    }\r\n\r\n    const onPlayPauseClick = () => {\r\n        if (isPlaying) {\r\n            setIsPlaying(false)\r\n        } else {\r\n            setIsPlaying(true)\r\n            setIsActive(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <VisibilitySensor\r\n            onChange={(isVisible) => {\r\n                if (props.index === 1) {\r\n                    setIsAnimate(isVisible);\r\n                }\r\n            }}\r\n        >\r\n            <ListItem button={true} alignItems=\"flex-start\">\r\n                <img alt={props.track.album.name} src={props.track.album.images[0].url} className={classes.albumImage}/>\r\n                <ListItemText\r\n                    primary={props.track.name}\r\n                    secondary={\r\n                        <React.Fragment>\r\n                        <Typography\r\n                            component=\"span\"\r\n                            variant=\"body2\"\r\n                            className={classes.inline}\r\n                        >\r\n                            {props.track.album.name}\r\n                            <br/>\r\n                            {getArtists()}\r\n                            \r\n                        </Typography>\r\n                        {isActive &&\r\n                            <ProgressBar variant=\"determinate\" value={currTime * (100/duration)}/>\r\n                        }\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"play-pause-button\" onClick={onPlayPauseClick} disabled={isDisabled}>\r\n                        {!isPlaying && \r\n                            <PlayCircleOutlineIcon className={isDisabled ? classes.disabled : classes.playPause}/>\r\n                        }\r\n                        {isPlaying &&\r\n                            <PauseCircleOutlineIcon className={classes.playPause} />\r\n                        }\r\n                    </IconButton>\r\n                    <audio ref={audioEl} src={props.track.preview_url} />\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </VisibilitySensor>\r\n    )\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\CircularProgressBar.tsx",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":30,"column":10,"nodeType":"65","messageId":"66","endLine":30,"endColumn":17},{"ruleId":"67","severity":1,"message":"68","line":88,"column":32,"nodeType":"69","messageId":"70","endLine":88,"endColumn":34},{"ruleId":"63","severity":1,"message":"71","line":4,"column":13,"nodeType":"65","messageId":"66","endLine":4,"endColumn":19},{"ruleId":"63","severity":1,"message":"72","line":5,"column":13,"nodeType":"65","messageId":"66","endLine":5,"endColumn":31},{"ruleId":"73","severity":1,"message":"74","line":88,"column":8,"nodeType":"75","endLine":88,"endColumn":19,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"@typescript-eslint/no-unused-vars","'message' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'genres' is defined but never used.","'genresInitialState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [isAnimate, props]",{"range":"82","text":"83"},[2986,2997],"[isAnimate, props]"]