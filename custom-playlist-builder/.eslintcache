[{"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx":"1","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts":"2","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx":"3","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx":"4","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx":"5","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx":"6","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx":"7","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx":"8","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx":"9","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx":"10","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx":"11","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\CircularProgressBar.tsx":"12","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\AlertEnum.tsx":"13","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Snackbar\\SnackbarNotif.tsx":"14","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Modal\\SignInModal.tsx":"15","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\WelcomeText\\WelcomeText.tsx":"16"},{"size":500,"mtime":1608436773401,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":12728,"mtime":1609228798629,"results":"20","hashOfConfig":"18"},{"size":2271,"mtime":1609210603328,"results":"21","hashOfConfig":"18"},{"size":2049,"mtime":1609210582765,"results":"22","hashOfConfig":"18"},{"size":397,"mtime":1608616554582,"results":"23","hashOfConfig":"18"},{"size":352,"mtime":1609134321180,"results":"24","hashOfConfig":"18"},{"size":805,"mtime":1609203553404,"results":"25","hashOfConfig":"18"},{"size":5372,"mtime":1609203876988,"results":"26","hashOfConfig":"18"},{"size":489,"mtime":1609025026735,"results":"27","hashOfConfig":"18"},{"size":555,"mtime":1609207206691,"results":"28","hashOfConfig":"18"},{"size":305,"mtime":1609211853050,"results":"29","hashOfConfig":"18"},{"size":451,"mtime":1609215646863,"results":"30","hashOfConfig":"18"},{"size":1903,"mtime":1609217127852,"results":"31","hashOfConfig":"18"},{"size":1891,"mtime":1609274157914,"results":"32","hashOfConfig":"18"},{"size":719,"mtime":1609274127323,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"zgppml",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx",[],["71","72"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx",["73"],"import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Spring } from \"react-spring/renderprops\";\nimport { GreenButton } from './components/shared/GreenButton';\nimport SpotifyList from './components/SpotifyList/SpotifyList';\nimport { InputField } from './components/shared/InputField/InputField';\nimport { CircularProgressBar } from './components/shared/CircularProgressBar';\nimport MetricSlider from './components/MetricSlider/MetricSlider';\nimport GenreSelector from './components/GenreSelector/GenreSelector';\nimport { AlertMessage } from './components/helpers/AlertEnum';\nimport { SnackbarNotif } from './components/Snackbar/SnackbarNotif';\nimport SignInModal from './components/Modal/SignInModal';\nimport { WelcomeText } from './components/WelcomeText/WelcomeText';\nimport './App.css';\n\nfunction App() {\n  const [accessToken, setAccessToken] = useState('');\n  const [popularity, setPopularity] = useState(0);\n  const [isPopularity, setIsPopularity] = useState(true);\n  const [energy, setEnergy] = useState(0);\n  const [isEnergy, setIsEnergy] = useState(true);\n  const [instrumentalness, setInstrumentalness] = useState(0);\n  const [isInstrumentalness, setIsInstrumentalness] = useState(true);\n  const [acousticness, setAcousticness] = useState(0);\n  const [isAcousticness, setIsAcousticness] = useState(true);\n  const [happiness, setHappiness] = useState(0);\n  const [isHappiness, setIsHappiness] = useState(true);\n  const [selectedGenres, setSelectedGenres] = useState([{id: 'default', checked: false}]);\n  const [spotifyRes, setSpotifyRes] = useState({seeds: [], tracks: []});\n  const [userData, setUserData] = useState({display_name: '', images: [{url: ''}], id: ''});\n  const [playlistTitle, setPlaylistTitle] = useState('Untitled-Playlist-1');\n  const [message, setMessage] = useState('');\n  const [isVisible, setIsVisible] = useState(true);\n  const [isPlaylistLoading, setIsPlaylistLoading] = useState(false);\n  const [isSaveLoading, setIsSaveLoading] = useState(false);\n\n  useEffect(() => {\n    let parsed = queryString.parse(window.location.search).access_token;\n    if (typeof parsed === \"string\") {\n      setAccessToken(parsed)\n    } else {\n      return;\n    }\n    fetch('https://api.spotify.com/v1/me', {\n      headers: {'Authorization': 'Bearer ' + parsed}\n    }).then(res => res.json())\n    .then(data => {\n      setUserData(data);\n    });\n  }, [])\n\n  function handlePopularityChange(newPopularity: number, isEnabled: boolean): void {\n    setPopularity(newPopularity);\n    setIsPopularity(isEnabled);\n  }\n\n  function handleEnergyChange(newEnergy: number, isEnabled: boolean): void {\n    setEnergy(newEnergy);\n    setIsEnergy(isEnabled);\n  }\n\n  function handleInstrumentallnessChange(newInstrumentalness: number, isEnabled: boolean): void {\n    setInstrumentalness(newInstrumentalness);\n    setIsInstrumentalness(isEnabled);\n  }\n\n  function handleAcousticnessChange(newAcousticness: number, isEnabled: boolean): void {\n    setAcousticness(newAcousticness);\n    setIsAcousticness(isEnabled);\n  }\n\n  function handleHappinessChange(newHappiness: number, isEnabled: boolean): void {\n    setHappiness(newHappiness);\n    setIsHappiness(isEnabled);\n  }\n\n  function handleGenreChange(newSelectedGenres: {id: string, checked: boolean}[]) {\n    setSelectedGenres(newSelectedGenres);\n  }\n\n  function handleTitleChange(newTitle: string) {\n    setPlaylistTitle(newTitle);\n  }\n  \n  function handleVisibleChange(newVisible: boolean) {\n    setIsVisible(newVisible);\n  }\n\n  function handleSnackbarClose(isClosed: boolean) {\n    if (isClosed) {\n      setMessage('');\n    }\n  }\n\n  function generateSeedGenres(): string {\n    let selected_arr: string[] = [];\n    selectedGenres.map((genre) => {\n      if (genre.checked) {\n        return selected_arr.push(genre.id);\n      }\n    });\n    return \"seed_genres=\" + selected_arr.join('%2C');\n  }\n\n  function buildTuneableString(): string {\n    let tuneableString: string = '';\n    if (isPopularity) {\n      tuneableString += \"&target_popularity=\" + popularity;\n    }\n    if (isEnergy) {\n      tuneableString += \"&target_energy=\" + String(energy/100);\n    }\n    if (isInstrumentalness) {\n      tuneableString += \"&target_instrumentalness=\" + String(instrumentalness/100);\n    }\n    if (isAcousticness) {\n      tuneableString += \"&target_acousticness=\" + String(acousticness/100);\n    }\n    if (isHappiness) {\n      tuneableString += \"&target_valence=\" + String(happiness/100); \n    }\n    return tuneableString;\n  }\n\n  function queryBuilder(): string {\n    return 'https://api.spotify.com/v1/recommendations?' + generateSeedGenres() + buildTuneableString() + \"&limit=30\";\n  }\n\n  function onGenerate(): void {\n    let selected: boolean[] = [];\n    selectedGenres.map((genre: any) => {\n      return selected.push(genre.checked);\n    });\n    let check: boolean = selected.every((e) => {return !e});\n    if (check) {\n      setIsPlaylistLoading(false);\n      setMessage(AlertMessage.GenreError);\n      return;\n    }\n    setSpotifyRes({seeds: [], tracks: []});\n    setIsPlaylistLoading(true);\n    console.log(queryBuilder());\n    fetch(queryBuilder(), {\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(res => res.json())\n    .then(data => {\n      setIsPlaylistLoading(false);\n      setSpotifyRes(data);\n      console.log(data);\n    });\n  }\n\n  function onSave(): void {\n    setIsSaveLoading(true);\n    fetch(`https://api.spotify.com/v1/users/${userData.id}/playlists`, {\n      headers: {\n        'Authorization': 'Bearer ' + accessToken,\n        'Content-Type': 'application/json'\n      },\n      method: 'post',\n      body: JSON.stringify({\n        name: playlistTitle,\n        public: false,\n        description: 'Created using Custom Playlist Builder'\n      })\n    }).then(res => res.json())\n      .then(data => {\n        if (data.error) {\n          setMessage(AlertMessage.TokenError);\n          setIsSaveLoading(false);\n          return;\n        }\n        console.log(data);\n        let uris: string[] = []\n        spotifyRes.tracks.map((track: any) => {\n          return uris.push(track.uri);\n        });\n        if (data.id) {\n          fetch(`https://api.spotify.com/v1/playlists/${data.id}/tracks`, {\n            headers: {\n              'Authorization': 'Bearer ' + accessToken,\n              'Accept': 'application/json'\n            },\n            method: 'post',\n            body: JSON.stringify({\n              uris: uris\n            })\n          }).then(res => res.json())\n          .then(data => {\n            if (data.error) {\n              setIsSaveLoading(false);\n              setMessage(AlertMessage.TokenError);\n              return;\n            }\n            setMessage(AlertMessage.SaveSuccess);\n            setIsSaveLoading(false);\n            console.log(data);\n          })\n        } else {\n          console.log('uh oh');\n          setIsSaveLoading(false);\n          return;\n        }\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <Grid container spacing={0}>\n        <Grid item lg={4} md={4} sm={12} xs={12} className=\"App-header\">\n          <div className=\"settings-panel\">\n            <div className=\"sub-title\">\n              <Typography variant=\"h4\">Genres</Typography>\n            </div>\n            <div className=\"genre-selector\">\n              <GenreSelector onChange={handleGenreChange}/>\n            </div>\n            <div className=\"metrics-panel\">\n              <div className=\"sub-title\">\n                <Typography variant=\"h4\">Tuners</Typography>\n              </div>\n              <MetricSlider \n                name=\"Popularity\"\n                onChange={handlePopularityChange}\n                initEnabled={true}\n                />\n              <MetricSlider \n                name=\"Energy\"\n                onChange={handleEnergyChange}\n                initEnabled={false}\n              />\n              <MetricSlider \n                name=\"Instrumentalness\"\n                onChange={handleInstrumentallnessChange}\n                initEnabled={false}\n                />\n              <MetricSlider \n                name=\"Acousticness\"\n                onChange={handleAcousticnessChange}\n                initEnabled={false}\n                />\n              <MetricSlider \n                name=\"Happiness\"\n                onChange={handleHappinessChange}\n                initEnabled={false}\n                />\n              <GreenButton className={accessToken === '' ? \"save-button\" : ''} variant=\"outlined\" color=\"primary\" onClick={onGenerate} disabled={accessToken === ''}>\n                Generate\n              </GreenButton>\n            </div>\n          </div>\n        </Grid>\n        <Grid item lg={8} md={8} sm={12} xs={12} className=\"display-panel\">\n          {accessToken === '' &&\n            <div className=\"welcome-text\">\n              <WelcomeText />\n            </div>\n          }\n          {isVisible && accessToken !== '' &&\n            <div className=\"display-header\">\n              <img src={userData.images[0].url} className=\"user-image\" alt={userData.display_name}/>\n                <div className=\"user-data\">\n                  <div className=\"hello-text\">\n                    <Typography variant=\"h4\">\n                      {`Welcome back, ${userData.display_name}!`}\n                    </Typography>\n                  </div>\n                  <div className=\"create-playlist-text\">\n                    <InputField onChange={handleTitleChange} title={playlistTitle}/>\n                    <div className=\"save-button-container\">\n                      {isSaveLoading ? \n                        <div className=\"loading-save\">\n                          <CircularProgressBar />\n                        </div> :\n                        <GreenButton className={spotifyRes.seeds.length === 0 ? \"save-button\" : ''} variant=\"outlined\" color=\"primary\" onClick={onSave} disabled={spotifyRes.seeds.length === 0}>\n                          Save Playlist\n                        </GreenButton>\n                      }\n                    </div>\n                  </div>\n                </div>\n              </div>\n          }\n          {!isVisible &&\n            <Spring\n              from={{ opacity: !isVisible ? 0 : 1}}\n              to={{ opacity: !isVisible ? 1 : 0}}\n              config={{duration: 200}}\n            >\n            {\n              props => (\n                <div className=\"sm-display-header\" style={props}>\n                  <img src={userData.images[0].url} className=\"user-image\" alt={userData.display_name}/>\n                    <div className=\"user-data\">\n                      <div className=\"sm-create-playlist-text\">\n                        <InputField onChange={handleTitleChange} title={playlistTitle}/>\n                        <div className=\"save-button-container\">\n                        {isSaveLoading ? \n                          <div className=\"loading-save\">\n                            <CircularProgressBar />\n                          </div> :\n                          <GreenButton className={spotifyRes.seeds.length === 0 ? \"save-button\" : ''} variant=\"outlined\" color=\"primary\" onClick={onSave} disabled={spotifyRes.seeds.length === 0}>\n                            Save Playlist\n                          </GreenButton>\n                        }\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n              )\n            }\n            </Spring>\n          }\n          {isPlaylistLoading &&\n            <div className=\"loading-playlist\">\n              <CircularProgressBar />\n            </div>\n          }\n          {spotifyRes.seeds.length === 0 && !isPlaylistLoading && accessToken !== '' &&\n            <div className=\"instruction-text\">\n              <Typography variant=\"h5\">Use the panel on the left to generate a playlist</Typography>\n            </div>\n          }\n          {spotifyRes.seeds.length !== 0 && spotifyRes.tracks.length === 0 && !isPlaylistLoading &&\n            <div className=\"no-found-text\">\n              <Typography variant=\"h5\">We couldn't find any music!</Typography>\n              <Typography variant=\"h6\">Try a different search</Typography>\n            </div>\n          }\n          {spotifyRes.tracks.length !==0 && spotifyRes.seeds.length !==0 && \n            <SpotifyList tracks={spotifyRes.tracks} onChange={handleVisibleChange}/>\n          }\n          {message !== '' &&\n            <SnackbarNotif isOpen={true} message={message} onClose={handleSnackbarClose}/>\n          }\n        </Grid>\n      </Grid>\n      {message === AlertMessage.TokenError &&\n        <SignInModal />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx",["74","75"],"import React, { useState, useEffect } from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport * as genres from '../helpers/genres.json';\r\nimport * as genresInitialState from '../helpers/genreSelectInitialState.json';\r\nimport { GreenCheckbox }  from '../shared/GreenCheckbox';\r\n\r\nexport default function GenreSelector(props: {onChange: (newValue: any[]) => void}) {\r\n    //const [state, setState] = useState(genresInitialState.popular_genres)\r\n    const [state, setState] = useState([\r\n        {id: \"pop\", checked: true}, \r\n        {id: \"hip-hop\", checked: false}, \r\n        {id: \"rock\", checked: false}, \r\n        {id: \"edm\", checked: false}, \r\n        {id: \"indie\", checked: false}, \r\n        {id: \"k-pop\", checked: false}, \r\n        {id: \"country\", checked: false}, \r\n        {id: \"classical\", checked: false}, \r\n    ]);\r\n\r\n    useEffect(() => {\r\n        props.onChange(state)\r\n    }, [state, props]);\r\n\r\n    const handleChange = (event: { target: { checked: boolean; name: string; }; }) => {\r\n        let updated_box = {id: event.target.name, checked: event.target.checked};\r\n        let updated_state: { id: string; checked: boolean; }[] = [];\r\n        state.map((genre) => {\r\n            if (genre.id === event.target.name) {\r\n                return updated_state.push(updated_box);\r\n            } else {\r\n                return updated_state.push(genre);\r\n            }\r\n        })\r\n        setState(state => updated_state)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <FormGroup row>\r\n                {state.map((genre, i) => {\r\n                    return (\r\n                        <FormControlLabel\r\n                            control={<GreenCheckbox checked={genre.checked} onChange={handleChange} name={genre.id}/>}\r\n                            label={genre.id}\r\n                            key={i}\r\n                        />\r\n                    )\r\n                })}\r\n            </FormGroup>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx",["76"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport VisibilitySensor from \"react-visibility-sensor\";\r\nimport { ProgressBar } from '../shared/ProgressBar';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    inline: {\r\n      display: 'inline',\r\n      color: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700]\r\n    },\r\n    albumImage: {\r\n        objectFit: 'contain',\r\n        width: '5em',\r\n        marginRight: '1em',\r\n    },\r\n    playPause: {\r\n        color: '#1DB954',\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        marginRight: '1.5em'\r\n    },\r\n    disabled: {\r\n        color: '#bdbdbd',\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        marginRight: '1.5em'\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function SpotifyListItem(props: {key: any, track: any, index: number, onChange: (newVisible: boolean) => void}) {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const isDisabled = props.track.preview_url === null\r\n    const [currTime, setCurrTime] = useState(0);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isAnimate, setIsAnimate] = useState(false);\r\n    const audioEl: any = useRef(null);\r\n    const classes = useStyles();\r\n    const duration = 61;\r\n\r\n    useEffect(() => {\r\n        let interval: any = null;\r\n        if (isPlaying && currTime !== duration) {\r\n            interval = setInterval(() => {\r\n                setCurrTime(currTime => currTime + 1);\r\n              }, 500);\r\n        } \r\n        else if (isPlaying && currTime === duration) {\r\n            setIsPlaying(false);\r\n            setCurrTime(0);\r\n            clearInterval(interval);\r\n            setIsActive(false);\r\n        }\r\n        else if (!isPlaying && currTime !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, [isPlaying, currTime])\r\n\r\n    useEffect(() => {\r\n        if (isPlaying && audioEl.current !== null) {\r\n            audioEl.current.play();\r\n        } else if(!isPlaying && audioEl.current !== null){\r\n            audioEl.current.pause();\r\n        }\r\n    }, [isPlaying])\r\n\r\n    useEffect(() => { /*FIX THIS LATER*/\r\n        return function cleanup() {\r\n            setIsPlaying(false);\r\n            setCurrTime(0);\r\n            setIsActive(false);\r\n        }\r\n    }, [props.track])\r\n\r\n    useEffect(() => { /*FIX THIS TOO */\r\n        props.onChange(isAnimate);\r\n    }, [isAnimate])\r\n\r\n    const getArtists = () => {\r\n        let artist_list: any[] = [];\r\n        props.track.artists.map((artist: any) => {\r\n            return artist_list.push(artist.name);\r\n        })\r\n        return artist_list.join(', ');\r\n    }\r\n\r\n    const onPlayPauseClick = () => {\r\n        if (isPlaying) {\r\n            setIsPlaying(false)\r\n        } else {\r\n            setIsPlaying(true)\r\n            setIsActive(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <VisibilitySensor\r\n            onChange={(isVisible) => {\r\n                if (props.index === 1) {\r\n                    setIsAnimate(isVisible);\r\n                }\r\n            }}\r\n        >\r\n            <ListItem button={true} alignItems=\"flex-start\">\r\n                <img alt={props.track.album.name} src={props.track.album.images[0].url} className={classes.albumImage}/>\r\n                <ListItemText\r\n                    primary={props.track.name}\r\n                    secondary={\r\n                        <React.Fragment>\r\n                        <Typography\r\n                            component=\"span\"\r\n                            variant=\"body2\"\r\n                            className={classes.inline}\r\n                        >\r\n                            {props.track.album.name}\r\n                            <br/>\r\n                            {getArtists()}\r\n                            \r\n                        </Typography>\r\n                        {isActive &&\r\n                            <ProgressBar variant=\"determinate\" value={currTime * (100/duration)}/>\r\n                        }\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"play-pause-button\" onClick={onPlayPauseClick} disabled={isDisabled}>\r\n                        {!isPlaying && \r\n                            <PlayCircleOutlineIcon className={isDisabled ? classes.disabled : classes.playPause}/>\r\n                        }\r\n                        {isPlaying &&\r\n                            <PauseCircleOutlineIcon className={classes.playPause} />\r\n                        }\r\n                    </IconButton>\r\n                    <audio ref={audioEl} src={props.track.preview_url} />\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </VisibilitySensor>\r\n    )\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\CircularProgressBar.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\AlertEnum.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Snackbar\\SnackbarNotif.tsx",["77"],"import React, { useEffect } from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { AlertVariant, AlertMessage, AlertString } from '../helpers/AlertEnum';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      height: '2em',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n      zIndex: 100,\r\n    },\r\n}));\r\n\r\nexport function SnackbarNotif(props: {isOpen: boolean, message: string, onClose: (isClosed: boolean) => void}) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(props.isOpen);\r\n    let severity: any = '';\r\n    let alertString: string = '';\r\n\r\n    useEffect(() => {\r\n        props.onClose(!open);\r\n    }, [open])\r\n\r\n    if (props.message === AlertMessage.GenreError) {\r\n        severity = AlertVariant.INSUFFICIENT_GENRES;\r\n        alertString = AlertString.GenreError;\r\n    } else if (props.message === AlertMessage.TokenError) {\r\n        severity = AlertVariant.TOKEN_EXPIRED;\r\n        alertString = AlertString.TokenError;\r\n    } else {\r\n        severity = AlertVariant.SAVE_SUCCESS;\r\n        alertString = AlertString.SaveSuccess;\r\n    }\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n    \r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity={severity}>\r\n                    {alertString}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Modal\\SignInModal.tsx",["78","79"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\WelcomeText\\WelcomeText.tsx",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":99,"column":32,"nodeType":"86","messageId":"87","endLine":99,"endColumn":34},{"ruleId":"88","severity":1,"message":"89","line":4,"column":13,"nodeType":"90","messageId":"91","endLine":4,"endColumn":19},{"ruleId":"88","severity":1,"message":"92","line":5,"column":13,"nodeType":"90","messageId":"91","endLine":5,"endColumn":31},{"ruleId":"93","severity":1,"message":"94","line":88,"column":8,"nodeType":"95","endLine":88,"endColumn":19,"suggestions":"96"},{"ruleId":"93","severity":1,"message":"94","line":30,"column":8,"nodeType":"95","endLine":30,"endColumn":14,"suggestions":"97"},{"ruleId":"88","severity":1,"message":"98","line":31,"column":10,"nodeType":"90","messageId":"91","endLine":31,"endColumn":14},{"ruleId":"88","severity":1,"message":"99","line":33,"column":9,"nodeType":"90","messageId":"91","endLine":33,"endColumn":19},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","@typescript-eslint/no-unused-vars","'genres' is defined but never used.","Identifier","unusedVar","'genresInitialState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["102"],["103"],"'open' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [isAnimate, props]",{"range":"108","text":"109"},"Update the dependencies array to be: [open, props]",{"range":"110","text":"111"},[2986,2997],"[isAnimate, props]",[963,969],"[open, props]"]