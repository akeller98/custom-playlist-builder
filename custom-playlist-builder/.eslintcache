[{"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx":"1","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts":"2","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx":"3","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx":"4","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx":"5","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx":"6","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx":"7","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx":"8","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx":"9","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx":"10"},{"size":500,"mtime":1608436773401,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":5668,"mtime":1608759334460,"results":"14","hashOfConfig":"12"},{"size":2265,"mtime":1608616795667,"results":"15","hashOfConfig":"12"},{"size":2029,"mtime":1609019548542,"results":"16","hashOfConfig":"12"},{"size":397,"mtime":1608616554582,"results":"17","hashOfConfig":"12"},{"size":300,"mtime":1608619488097,"results":"18","hashOfConfig":"12"},{"size":785,"mtime":1609019103330,"results":"19","hashOfConfig":"12"},{"size":4455,"mtime":1609025035750,"results":"20","hashOfConfig":"12"},{"size":489,"mtime":1609025026735,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"zgppml",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx",[],["47","48"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx",["49","50"],"import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport './App.css';\nimport MetricSlider from './components/MetricSlider/MetricSlider';\nimport GenreSelector from './components/GenreSelector/GenreSelector';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { GreenButton } from './components/shared/GreenButton';\nimport SpotifyList from './components/SpotifyList/SpotifyList';\n\nfunction App() {\n  const [accessToken, setAccessToken] = React.useState('');\n  const [popularity, setPopularity] = React.useState(0);\n  const [isPopularity, setIsPopularity] = React.useState(true);\n  const [energy, setEnergy] = React.useState(0);\n  const [isEnergy, setIsEnergy] = React.useState(true);\n  const [instrumentalness, setInstrumentalness] = React.useState(0);\n  const [isInstrumentalness, setIsInstrumentalness] = React.useState(true);\n  const [acousticness, setAcousticness] = React.useState(0);\n  const [isAcousticness, setIsAcousticness] = React.useState(true);\n  const [happiness, setHappiness] = React.useState(0);\n  const [isHappiness, setIsHappiness] = React.useState(true);\n  const [selectedGenres, setSelectedGenres] = React.useState([{id: 'default', checked: false}]);\n  const [spotifyRes, setSpotifyRes] = React.useState({seeds: [], tracks: []});\n\n  useEffect(() => {\n    let parsed = queryString.parse(window.location.search).access_token;\n    if (typeof parsed === \"string\") {\n      setAccessToken(parsed)\n    }\n  }, [accessToken])\n\n  function handlePopularityChange(newPopularity: number, isEnabled: boolean): void {\n    setPopularity(newPopularity);\n    setIsPopularity(isEnabled);\n  }\n\n  function handleEnergyChange(newEnergy: number, isEnabled: boolean): void {\n    setEnergy(newEnergy);\n    setIsEnergy(isEnabled);\n  }\n\n  function handleInstrumentallnessChange(newInstrumentalness: number, isEnabled: boolean): void {\n    setInstrumentalness(newInstrumentalness);\n    setIsInstrumentalness(isEnabled);\n  }\n\n  function handleAcousticnessChange(newAcousticness: number, isEnabled: boolean): void {\n    setAcousticness(newAcousticness);\n    setIsAcousticness(isEnabled);\n  }\n\n  function handleHappinessChange(newHappiness: number, isEnabled: boolean): void {\n    setHappiness(newHappiness);\n    setIsHappiness(isEnabled);\n  }\n\n  function handleGenreChange(newSelectedGenres: {id: string, checked: boolean}[]) {\n    setSelectedGenres(newSelectedGenres);\n  }\n  \n  function generateSeedGenres(): string {\n    let selected_arr: string[] = [];\n    selectedGenres.map((genre) => {\n      if (genre.checked) {\n        selected_arr.push(genre.id);\n      }\n    });\n    return \"seed_genres=\" + selected_arr.join('%2C');\n  }\n\n  function buildTuneableString(): string {\n    let tuneableString: string = '';\n    if (isPopularity) {\n      tuneableString += \"&target_popularity=\" + popularity;\n    }\n    if (isEnergy) {\n      tuneableString += \"&target_energy=\" + String(energy/100);\n    }\n    if (isInstrumentalness) {\n      tuneableString += \"&target_instrumentalness=\" + String(instrumentalness/100);\n    }\n    if (isAcousticness) {\n      tuneableString += \"&target_acousticness=\" + String(acousticness/100);\n    }\n    if (isHappiness) {\n      tuneableString += \"&target_valence=\" + String(happiness/100); \n    }\n    return tuneableString;\n  }\n\n  function queryBuilder(): string {\n    return 'https://api.spotify.com/v1/recommendations?' + generateSeedGenres() + buildTuneableString();\n  }\n\n  function onGenerate(): void {\n    console.log(queryBuilder());\n    fetch(queryBuilder(), {\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(res => res.json())\n    .then(data => {\n      setSpotifyRes(data);\n      console.log(data);\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Grid container spacing={0}>\n        <Grid item lg={4} md={4} sm={12} xs={12} className=\"App-header\">\n          <div className=\"settings-panel\">\n            <div className=\"sub-title\">\n              <Typography variant=\"h3\">Genres</Typography>\n            </div>\n            <div className=\"genre-selector\">\n              <GenreSelector onChange={handleGenreChange}/>\n            </div>\n            <div className=\"metrics-panel\">\n              <div className=\"sub-title\">\n                <Typography variant=\"h3\">Tuners</Typography>\n              </div>\n              <MetricSlider \n                name=\"Popularity\"\n                onChange={handlePopularityChange}\n                initEnabled={true}\n                />\n              <MetricSlider \n                name=\"Energy\"\n                onChange={handleEnergyChange}\n                initEnabled={false}\n              />\n              <MetricSlider \n                name=\"Instrumentalness\"\n                onChange={handleInstrumentallnessChange}\n                initEnabled={false}\n                />\n              <MetricSlider \n                name=\"Acousticness\"\n                onChange={handleAcousticnessChange}\n                initEnabled={false}\n                />\n              <MetricSlider \n                name=\"Happiness\"\n                onChange={handleHappinessChange}\n                initEnabled={false}\n                />\n              <GreenButton variant=\"outlined\" color=\"primary\" onClick={onGenerate}>\n                Generate\n              </GreenButton>\n            </div>\n          </div>\n        </Grid>\n        <Grid item lg={8} md={8} sm={12} xs={12} className=\"display-panel\">\n          {spotifyRes.tracks.length !==0 && spotifyRes.seeds.length !==0 && \n            <SpotifyList tracks={spotifyRes.tracks} />\n          }\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx",["51"],"import React, { useState, useEffect } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { GreenCheckbox } from '../shared/GreenCheckbox';\r\nimport './MetricSlider.css';\r\n\r\nconst GreenSlider = withStyles({\r\n    root: {\r\n      color: '#52af77',\r\n    },\r\n    thumb: {\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n    },\r\n    active: {},\r\n  })(Slider);\r\n\r\nfunction valuetext(value: number) {\r\n    return `${value}`;\r\n}\r\n\r\nexport default function MetricSlider(props: {name: string, onChange: (newValue: number, isEnabled: boolean) => void, initEnabled: boolean}) {\r\n    const defaultVal = 20;\r\n    const [currValue, setCurrValue] = useState(defaultVal);\r\n    const [isEnabled, setIsEnabled] = useState(props.initEnabled);\r\n\r\n    useEffect(() => {\r\n        props.onChange(currValue, isEnabled)\r\n    }, [currValue, isEnabled])\r\n\r\n    function handleChange(event: object, value: number | number[]) {\r\n        if (typeof value === \"number\") {\r\n            setCurrValue(value)\r\n        }   \r\n    }\r\n\r\n    const handleEnabledChange = (event: { target: { checked: boolean; name: string; }; }) => {\r\n        setIsEnabled(event.target.checked);\r\n    }\r\n\r\n    return (\r\n        <div className=\"slider-wrapper\">\r\n            <div className=\"slider-group\">\r\n                <div className=\"slider-title\">\r\n                    <Typography id=\"discrete-slider-always\">\r\n                        {props.name}\r\n                    </Typography>\r\n                </div>\r\n                <div className=\"slider-checkbox\">\r\n                        <GreenCheckbox checked={isEnabled} onChange={handleEnabledChange}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"slider-control\">\r\n                <GreenSlider\r\n                    defaultValue={defaultVal}\r\n                    getAriaValueText={valuetext}\r\n                    aria-labelledby=\"discrete-slider-always\"\r\n                    step={5}\r\n                    valueLabelDisplay=\"on\"\r\n                    onChange={handleChange}\r\n                    disabled={!isEnabled}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx",["52","53","54","55"],"import React, { useState, useEffect } from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport * as genres from '../helpers/genres.json';\r\nimport * as genresInitialState from '../helpers/genreSelectInitialState.json';\r\nimport { GreenCheckbox }  from '../shared/GreenCheckbox';\r\n\r\nexport default function GenreSelector(props: {onChange: (newValue: any[]) => void}) {\r\n    //const [state, setState] = useState(genresInitialState.popular_genres)\r\n    const [state, setState] = useState([\r\n        {id: \"pop\", checked: false}, \r\n        {id: \"hip-hop\", checked: false}, \r\n        {id: \"rock\", checked: false}, \r\n        {id: \"edm\", checked: false}, \r\n        {id: \"indie\", checked: false}, \r\n        {id: \"k-pop\", checked: false}, \r\n        {id: \"country\", checked: false}, \r\n        {id: \"classical\", checked: false}, \r\n    ]);\r\n\r\n    useEffect(() => {\r\n        props.onChange(state)\r\n    }, [state]);\r\n\r\n    const handleChange = (event: { target: { checked: boolean; name: string; }; }) => {\r\n        let updated_box = {id: event.target.name, checked: event.target.checked};\r\n        let updated_state: { id: string; checked: boolean; }[] = [];\r\n        state.map((genre) => {\r\n            if (genre.id === event.target.name) {\r\n                updated_state.push(updated_box);\r\n            } else {\r\n                updated_state.push(genre);\r\n            }\r\n        })\r\n        setState(state => updated_state)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <FormGroup row>\r\n                {state.map((genre, i) => {\r\n                    return (\r\n                        <FormControlLabel\r\n                            control={<GreenCheckbox checked={genre.checked} onChange={handleChange} name={genre.id}/>}\r\n                            label={genre.id}\r\n                            key={i}\r\n                        />\r\n                    )\r\n                })}\r\n            </FormGroup>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx",["56"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport SpotifyListItem from '../SpotifyListItem/SpotifyListItem';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      backgroundColor: '#161b22',\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function SpotifyList(props: {tracks: object[]}) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <List className={classes.root}>\r\n            {props.tracks.map((track, i) => {\r\n                return (\r\n                    <SpotifyListItem key={i} track={track} />\r\n                )\r\n            })}\r\n        </List>\r\n    )\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx",["57","58","59"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":17,"nodeType":"66","messageId":"67","endLine":1,"endColumn":25},{"ruleId":"68","severity":1,"message":"69","line":64,"column":32,"nodeType":"70","messageId":"71","endLine":64,"endColumn":34},{"ruleId":"72","severity":1,"message":"73","line":31,"column":8,"nodeType":"74","endLine":31,"endColumn":30,"suggestions":"75"},{"ruleId":"64","severity":1,"message":"76","line":4,"column":13,"nodeType":"66","messageId":"67","endLine":4,"endColumn":19},{"ruleId":"64","severity":1,"message":"77","line":5,"column":13,"nodeType":"66","messageId":"67","endLine":5,"endColumn":31},{"ruleId":"72","severity":1,"message":"73","line":23,"column":8,"nodeType":"74","endLine":23,"endColumn":15,"suggestions":"78"},{"ruleId":"68","severity":1,"message":"69","line":28,"column":27,"nodeType":"70","messageId":"71","endLine":28,"endColumn":29},{"ruleId":"64","severity":1,"message":"79","line":2,"column":8,"nodeType":"66","messageId":"67","endLine":2,"endColumn":18},{"ruleId":"72","severity":1,"message":"80","line":74,"column":8,"nodeType":"74","endLine":74,"endColumn":20,"suggestions":"81"},{"ruleId":"68","severity":1,"message":"69","line":78,"column":47,"nodeType":"70","messageId":"71","endLine":78,"endColumn":49},{"ruleId":"82","severity":1,"message":"83","line":95,"column":13,"nodeType":"84","endLine":95,"endColumn":88},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["87"],"'genres' is defined but never used.","'genresInitialState' is defined but never used.",["88"],"'Typography' is defined but never used.","React Hook useEffect has a missing dependency: 'props.track.preview_url'. Either include it or remove the dependency array. If 'setIsDisabled' needs the current value of 'props.track.preview_url', you can also switch to useReducer instead of useState and read 'props.track.preview_url' in the reducer.",["89"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [currValue, isEnabled, props]",{"range":"96","text":"97"},"Update the dependencies array to be: [props, state]",{"range":"98","text":"99"},"Update the dependencies array to be: [isDisabled, props.track.preview_url]",{"range":"100","text":"101"},[963,985],"[currValue, isEnabled, props]",[976,983],"[props, state]",[2470,2482],"[isDisabled, props.track.preview_url]"]