[{"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx":"1","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts":"2","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx":"3","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx":"4","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx":"5","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx":"6","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx":"7","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx":"8","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx":"9","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx":"10","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx":"11","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\CircularProgressBar.tsx":"12","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\AlertEnum.tsx":"13","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Snackbar\\SnackbarNotif.tsx":"14","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Modal\\SignInModal.tsx":"15","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\WelcomeText\\WelcomeText.tsx":"16","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SettingsPanel\\SettingsPanel.tsx":"17","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\http\\http.tsx":"18","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\helpers.tsx":"19"},{"size":500,"mtime":1608436773401,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":7813,"mtime":1609280756810,"results":"23","hashOfConfig":"21"},{"size":2271,"mtime":1609210603328,"results":"24","hashOfConfig":"21"},{"size":2049,"mtime":1609210582765,"results":"25","hashOfConfig":"21"},{"size":397,"mtime":1608616554582,"results":"26","hashOfConfig":"21"},{"size":352,"mtime":1609134321180,"results":"27","hashOfConfig":"21"},{"size":805,"mtime":1609203553404,"results":"28","hashOfConfig":"21"},{"size":5372,"mtime":1609203876988,"results":"29","hashOfConfig":"21"},{"size":489,"mtime":1609025026735,"results":"30","hashOfConfig":"21"},{"size":555,"mtime":1609207206691,"results":"31","hashOfConfig":"21"},{"size":305,"mtime":1609211853050,"results":"32","hashOfConfig":"21"},{"size":451,"mtime":1609215646863,"results":"33","hashOfConfig":"21"},{"size":1903,"mtime":1609217127852,"results":"34","hashOfConfig":"21"},{"size":1891,"mtime":1609274157914,"results":"35","hashOfConfig":"21"},{"size":719,"mtime":1609274127323,"results":"36","hashOfConfig":"21"},{"size":5408,"mtime":1609279310323,"results":"37","hashOfConfig":"21"},{"size":2742,"mtime":1609280544872,"results":"38","hashOfConfig":"21"},{"size":2415,"mtime":1609278813531,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"zgppml",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx",[],["83","84"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider\\MetricSlider.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector\\GenreSelector.tsx",["85","86"],"import React, { useState, useEffect } from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport * as genres from '../helpers/genres.json';\r\nimport * as genresInitialState from '../helpers/genreSelectInitialState.json';\r\nimport { GreenCheckbox }  from '../shared/GreenCheckbox';\r\n\r\nexport default function GenreSelector(props: {onChange: (newValue: any[]) => void}) {\r\n    //const [state, setState] = useState(genresInitialState.popular_genres)\r\n    const [state, setState] = useState([\r\n        {id: \"pop\", checked: true}, \r\n        {id: \"hip-hop\", checked: false}, \r\n        {id: \"rock\", checked: false}, \r\n        {id: \"edm\", checked: false}, \r\n        {id: \"indie\", checked: false}, \r\n        {id: \"k-pop\", checked: false}, \r\n        {id: \"country\", checked: false}, \r\n        {id: \"classical\", checked: false}, \r\n    ]);\r\n\r\n    useEffect(() => {\r\n        props.onChange(state)\r\n    }, [state, props]);\r\n\r\n    const handleChange = (event: { target: { checked: boolean; name: string; }; }) => {\r\n        let updated_box = {id: event.target.name, checked: event.target.checked};\r\n        let updated_state: { id: string; checked: boolean; }[] = [];\r\n        state.map((genre) => {\r\n            if (genre.id === event.target.name) {\r\n                return updated_state.push(updated_box);\r\n            } else {\r\n                return updated_state.push(genre);\r\n            }\r\n        })\r\n        setState(state => updated_state)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <FormGroup row>\r\n                {state.map((genre, i) => {\r\n                    return (\r\n                        <FormControlLabel\r\n                            control={<GreenCheckbox checked={genre.checked} onChange={handleChange} name={genre.id}/>}\r\n                            label={genre.id}\r\n                            key={i}\r\n                        />\r\n                    )\r\n                })}\r\n            </FormGroup>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenCheckbox.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\GreenButton.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyList\\SpotifyList.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SpotifyListItem\\SpotifyListItem.tsx",["87"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport VisibilitySensor from \"react-visibility-sensor\";\r\nimport { ProgressBar } from '../shared/ProgressBar';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    inline: {\r\n      display: 'inline',\r\n      color: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700]\r\n    },\r\n    albumImage: {\r\n        objectFit: 'contain',\r\n        width: '5em',\r\n        marginRight: '1em',\r\n    },\r\n    playPause: {\r\n        color: '#1DB954',\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        marginRight: '1.5em'\r\n    },\r\n    disabled: {\r\n        color: '#bdbdbd',\r\n        height: '1.5em',\r\n        width: '1.5em',\r\n        marginRight: '1.5em'\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function SpotifyListItem(props: {key: any, track: any, index: number, onChange: (newVisible: boolean) => void}) {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const isDisabled = props.track.preview_url === null\r\n    const [currTime, setCurrTime] = useState(0);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [isAnimate, setIsAnimate] = useState(false);\r\n    const audioEl: any = useRef(null);\r\n    const classes = useStyles();\r\n    const duration = 61;\r\n\r\n    useEffect(() => {\r\n        let interval: any = null;\r\n        if (isPlaying && currTime !== duration) {\r\n            interval = setInterval(() => {\r\n                setCurrTime(currTime => currTime + 1);\r\n              }, 500);\r\n        } \r\n        else if (isPlaying && currTime === duration) {\r\n            setIsPlaying(false);\r\n            setCurrTime(0);\r\n            clearInterval(interval);\r\n            setIsActive(false);\r\n        }\r\n        else if (!isPlaying && currTime !== 0) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, [isPlaying, currTime])\r\n\r\n    useEffect(() => {\r\n        if (isPlaying && audioEl.current !== null) {\r\n            audioEl.current.play();\r\n        } else if(!isPlaying && audioEl.current !== null){\r\n            audioEl.current.pause();\r\n        }\r\n    }, [isPlaying])\r\n\r\n    useEffect(() => { /*FIX THIS LATER*/\r\n        return function cleanup() {\r\n            setIsPlaying(false);\r\n            setCurrTime(0);\r\n            setIsActive(false);\r\n        }\r\n    }, [props.track])\r\n\r\n    useEffect(() => { /*FIX THIS TOO */\r\n        props.onChange(isAnimate);\r\n    }, [isAnimate])\r\n\r\n    const getArtists = () => {\r\n        let artist_list: any[] = [];\r\n        props.track.artists.map((artist: any) => {\r\n            return artist_list.push(artist.name);\r\n        })\r\n        return artist_list.join(', ');\r\n    }\r\n\r\n    const onPlayPauseClick = () => {\r\n        if (isPlaying) {\r\n            setIsPlaying(false)\r\n        } else {\r\n            setIsPlaying(true)\r\n            setIsActive(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <VisibilitySensor\r\n            onChange={(isVisible) => {\r\n                if (props.index === 1) {\r\n                    setIsAnimate(isVisible);\r\n                }\r\n            }}\r\n        >\r\n            <ListItem button={true} alignItems=\"flex-start\">\r\n                <img alt={props.track.album.name} src={props.track.album.images[0].url} className={classes.albumImage}/>\r\n                <ListItemText\r\n                    primary={props.track.name}\r\n                    secondary={\r\n                        <React.Fragment>\r\n                        <Typography\r\n                            component=\"span\"\r\n                            variant=\"body2\"\r\n                            className={classes.inline}\r\n                        >\r\n                            {props.track.album.name}\r\n                            <br/>\r\n                            {getArtists()}\r\n                            \r\n                        </Typography>\r\n                        {isActive &&\r\n                            <ProgressBar variant=\"determinate\" value={currTime * (100/duration)}/>\r\n                        }\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton edge=\"end\" aria-label=\"play-pause-button\" onClick={onPlayPauseClick} disabled={isDisabled}>\r\n                        {!isPlaying && \r\n                            <PlayCircleOutlineIcon className={isDisabled ? classes.disabled : classes.playPause}/>\r\n                        }\r\n                        {isPlaying &&\r\n                            <PauseCircleOutlineIcon className={classes.playPause} />\r\n                        }\r\n                    </IconButton>\r\n                    <audio ref={audioEl} src={props.track.preview_url} />\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n        </VisibilitySensor>\r\n    )\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\ProgressBar.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\InputField\\InputField.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\shared\\CircularProgressBar.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\AlertEnum.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Snackbar\\SnackbarNotif.tsx",["88"],"import React, { useEffect } from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { AlertVariant, AlertMessage, AlertString } from '../helpers/AlertEnum';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      height: '2em',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n      zIndex: 100,\r\n    },\r\n}));\r\n\r\nexport function SnackbarNotif(props: {isOpen: boolean, message: string, onClose: (isClosed: boolean) => void}) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(props.isOpen);\r\n    let severity: any = '';\r\n    let alertString: string = '';\r\n\r\n    useEffect(() => {\r\n        props.onClose(!open);\r\n    }, [open])\r\n\r\n    if (props.message === AlertMessage.GenreError) {\r\n        severity = AlertVariant.INSUFFICIENT_GENRES;\r\n        alertString = AlertString.GenreError;\r\n    } else if (props.message === AlertMessage.TokenError) {\r\n        severity = AlertVariant.TOKEN_EXPIRED;\r\n        alertString = AlertString.TokenError;\r\n    } else {\r\n        severity = AlertVariant.SAVE_SUCCESS;\r\n        alertString = AlertString.SaveSuccess;\r\n    }\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n    \r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity={severity}>\r\n                    {alertString}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\Modal\\SignInModal.tsx",["89","90"],"import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { GreenButton } from '../shared/GreenButton';\r\nimport * as config from '../../config/config.json';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n      width: '25%',\r\n      backgroundColor: '#424242',\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n      marginLeft: '38%',\r\n      marginTop: '15%',\r\n      color: 'white'\r\n    },\r\n    signInButton: {\r\n      textAlign: 'center'\r\n    },\r\n    modalBody: {\r\n      textAlign: 'center'\r\n    }\r\n  }),\r\n);\r\n\r\nexport default function SignInModal() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const onClick = (event: any) => {\r\n    event.preventDefault();\r\n    window.location.href=config.signInURL;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        open={true}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        <div className={classes.paper}>\r\n          <Typography variant=\"h4\">Uh oh!</Typography>\r\n          <br />\r\n          <div className={classes.modalBody}>\r\n            <Typography id=\"simple-modal-description\">\r\n              Looks like your token expired. Please sign in again:\r\n            </Typography>\r\n          </div>\r\n          <br />\r\n          <div className={classes.signInButton}>\r\n            <GreenButton variant=\"outlined\" color=\"primary\" onClick={onClick}>Sign In</GreenButton>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\WelcomeText\\WelcomeText.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\SettingsPanel\\SettingsPanel.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\http\\http.tsx",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\helpers\\helpers.tsx",["91"],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":4,"column":13,"nodeType":"98","messageId":"99","endLine":4,"endColumn":19},{"ruleId":"96","severity":1,"message":"100","line":5,"column":13,"nodeType":"98","messageId":"99","endLine":5,"endColumn":31},{"ruleId":"101","severity":1,"message":"102","line":88,"column":8,"nodeType":"103","endLine":88,"endColumn":19,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"102","line":30,"column":8,"nodeType":"103","endLine":30,"endColumn":14,"suggestions":"105"},{"ruleId":"96","severity":1,"message":"106","line":31,"column":10,"nodeType":"98","messageId":"99","endLine":31,"endColumn":14},{"ruleId":"96","severity":1,"message":"107","line":33,"column":9,"nodeType":"98","messageId":"99","endLine":33,"endColumn":19},{"ruleId":"108","severity":1,"message":"109","line":4,"column":32,"nodeType":"110","messageId":"111","endLine":4,"endColumn":34},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"@typescript-eslint/no-unused-vars","'genres' is defined but never used.","Identifier","unusedVar","'genresInitialState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["114"],["115"],"'open' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [isAnimate, props]",{"range":"120","text":"121"},"Update the dependencies array to be: [open, props]",{"range":"122","text":"123"},[2986,2997],"[isAnimate, props]",[963,969],"[open, props]"]