[{"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx":"1","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts":"2","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx":"3","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider.tsx":"4","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector.tsx":"5"},{"size":500,"mtime":1608436773401,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":4773,"mtime":1608605041627,"results":"9","hashOfConfig":"7"},{"size":1899,"mtime":1608594511997,"results":"10","hashOfConfig":"7"},{"size":2013,"mtime":1608583587452,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"zgppml",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\index.tsx",[],["25","26"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\reportWebVitals.ts",[],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\App.tsx",["27","28"],"C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\MetricSlider.tsx",["29"],"import React, { useState, useEffect } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport './MetricSlider.css';\r\n\r\nfunction valuetext(value: number) {\r\n    return `${value}`;\r\n}\r\n\r\nexport default function MetricSlider(props: {name: string, onChange: (newValue: number, isEnabled: boolean) => void}) {\r\n    const defaultVal = 20;\r\n    const [currValue, setCurrValue] = useState(defaultVal);\r\n    const [isEnabled, setIsEnabled] = useState(true);\r\n\r\n    useEffect(() => {\r\n        props.onChange(currValue, isEnabled)\r\n    }, [currValue, isEnabled])\r\n\r\n    function handleChange(event: object, value: number | number[]) {\r\n        if (typeof value === \"number\") {\r\n            setCurrValue(value)\r\n        }   \r\n    }\r\n\r\n    const handleEnabledChange = (event: { target: { checked: boolean; name: string; }; }) => {\r\n        setIsEnabled(event.target.checked);\r\n    }\r\n\r\n    return (\r\n        <div className=\"slider-wrapper\">\r\n            <div className=\"slider-group\">\r\n                <div className=\"slider-title\">\r\n                    <Typography id=\"discrete-slider-always\">\r\n                        {props.name}\r\n                    </Typography>\r\n                </div>\r\n                <div className=\"slider-checkbox\">\r\n                        <Checkbox checked={isEnabled} onChange={handleEnabledChange}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"slider-control\">\r\n                <Slider\r\n                    defaultValue={defaultVal}\r\n                    getAriaValueText={valuetext}\r\n                    aria-labelledby=\"discrete-slider-always\"\r\n                    step={5}\r\n                    valueLabelDisplay=\"on\"\r\n                    onChange={handleChange}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","C:\\Users\\akell\\custom-playlist-builder\\custom-playlist-builder\\src\\components\\GenreSelector.tsx",["30","31","32","33"],"import React, { useState, useEffect } from 'react';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport * as genres from './helpers/genres.json';\r\nimport * as genresInitialState from './helpers/genreSelectInitialState.json'\r\n\r\nexport default function GenreSelector(props: {onChange: (newValue: any[]) => void}) {\r\n    //const [state, setState] = useState(genresInitialState.popular_genres)\r\n    const [state, setState] = useState([\r\n        {id: \"pop\", checked: false}, \r\n        {id: \"hip-hop\", checked: false}, \r\n        {id: \"rock\", checked: false}, \r\n        {id: \"edm\", checked: false}, \r\n        {id: \"indie\", checked: false}, \r\n        {id: \"k-pop\", checked: false}, \r\n        {id: \"country\", checked: false}, \r\n        {id: \"classical\", checked: false}, \r\n        {id: \"latin\", checked: false}\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        props.onChange(state)\r\n    }, [state]);\r\n\r\n    const handleChange = (event: { target: { checked: boolean; name: string; }; }) => {\r\n        let updated_box = {id: event.target.name, checked: event.target.checked};\r\n        let updated_state: { id: string; checked: boolean; }[] = [];\r\n        state.map((genre) => {\r\n            if (genre.id === event.target.name) {\r\n                updated_state.push(updated_box);\r\n            } else {\r\n                updated_state.push(genre);\r\n            }\r\n        })\r\n        setState(state => updated_state)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <FormGroup row>\r\n                {state.map((genre) => {\r\n                    return (\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={genre.checked} onChange={handleChange} name={genre.id}/>}\r\n                            label={genre.id}\r\n                        />\r\n                    )\r\n                })}\r\n            </FormGroup>\r\n        </React.Fragment>\r\n    );\r\n}",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":25},{"ruleId":"42","severity":1,"message":"43","line":61,"column":32,"nodeType":"44","messageId":"45","endLine":61,"endColumn":34},{"ruleId":"46","severity":1,"message":"47","line":18,"column":8,"nodeType":"48","endLine":18,"endColumn":30,"suggestions":"49"},{"ruleId":"38","severity":1,"message":"50","line":5,"column":13,"nodeType":"40","messageId":"41","endLine":5,"endColumn":19},{"ruleId":"38","severity":1,"message":"51","line":6,"column":13,"nodeType":"40","messageId":"41","endLine":6,"endColumn":31},{"ruleId":"46","severity":1,"message":"47","line":24,"column":8,"nodeType":"48","endLine":24,"endColumn":15,"suggestions":"52"},{"ruleId":"42","severity":1,"message":"43","line":29,"column":27,"nodeType":"44","messageId":"45","endLine":29,"endColumn":29},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["55"],"'genres' is defined but never used.","'genresInitialState' is defined but never used.",["56"],"no-global-assign","no-unsafe-negation",{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},"Update the dependencies array to be: [currValue, isEnabled, props]",{"range":"61","text":"62"},"Update the dependencies array to be: [props, state]",{"range":"63","text":"64"},[650,672],"[currValue, isEnabled, props]",[1005,1012],"[props, state]"]